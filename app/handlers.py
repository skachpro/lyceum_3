from datetime import datetime, timedelta, date, time
from aiogram.filters.logic import or_f
from aiogram.types import (ReplyKeyboardMarkup,
                           KeyboardButton,
                           InlineKeyboardMarkup,
                           InlineKeyboardButton)
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram import F, Router, Bot
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, InputFile

import app.keyboards as kb

from app import database as db
import os
from dotenv import load_dotenv
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from app.pygithub import upload_to_github
import aiohttp

load_dotenv()
bot = Bot(token=os.getenv('BOT_API'))

router = Router()

class RememberMe(StatesGroup):
    user_id = State()
    user_class = State()


@router.message(CommandStart())
async def cmd_start(message: Message):
    await db.del_user("DELETE FROM users WHERE user_id = %s", 6156445988, 1397873368)
    user_id = message.from_user.id
    user_name = message.from_user.first_name

    user = await db.execute_query("SELECT * FROM users WHERE user_id = %s", user_id,fetch="fetchone")

    print(user)
    answer = f'<b>–í—ñ—Ç–∞—î–º–æ </b>{user_name}!\nTelegram-bot –õ—ñ—Ü–µ—é ‚Ññ3 —ñ–º–µ–Ω—ñ –ê—Ä—Ç–µ–º–∞ –ú–∞–∑—É—Ä–∞ –¥–æ –≤–∞—à–∏—Ö –ø–æ—Å–ª—É–≥!\n–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é ‚¨áÔ∏è'

    try:
        if user[1] == "7-9 –∫–ª–∞—Å":
            await message.answer(answer, parse_mode='HTML', reply_markup=kb.kbd_for_young_stud)
        elif user[1] == '10-11 –∫–ª–∞—Å':
            await message.answer(answer, parse_mode='HTML', reply_markup=kb.for_students)
    except:
        await message.answer(answer, parse_mode='HTML', reply_markup=kb.start)

class Answers(StatesGroup):
    step = State()

@router.callback_query(F.data == 'check_for_answer')
async def check_for_answers(callback_query: CallbackQuery, state: FSMContext):

    questions = await db.execute_query("""SELECT id, name, question, answer 
        FROM question_answer 
        WHERE answer != %s 
        LIMIT 5
    """,("None",))
    if not questions:
        await callback_query.message.answer("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è.", parse_mode="html")
        return

    await state.set_state(Answers.step)
    await state.update_data(questions=questions, step=0)

    current_question = questions[0]
    response = (
        f"–ó–∞–ø–∏—Ç–∞–Ω–Ω—è:\n<pre><code>{current_question[1]}:\n{current_question[2]}</code></pre>\n"
        f"–í—ñ–¥–ø–æ–≤—ñ–¥—å:\n<pre><code>{current_question[3]}</code></pre>"
    )
    await callback_query.message.edit_text(response, parse_mode="html", reply_markup=kb.answer_nav)


@router.callback_query(F.data == "next")
async def next_answer(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    questions = data.get("questions", [])
    step = data.get("step", 0) + 1

    if step < len(questions):

        await state.update_data(step=step)
        current_question = questions[step]


        response = (
            f"–ó–∞–ø–∏—Ç–∞–Ω–Ω—è:\n<pre><code>{current_question[1]}:\n{current_question[2]}</code></pre>\n"
            f"–í—ñ–¥–ø–æ–≤—ñ–¥—å:\n<pre><code>{current_question[3]}</code></pre>"
        )
        await callback_query.message.edit_text(response, parse_mode="html", reply_markup=kb.answer_nav)
    else:
        await callback_query.answer("–¶–µ –±—É–≤ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å.")


@router.callback_query(F.data == "prev")
async def prev_answer(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    questions = data.get("questions", [])
    step = data.get("step", 0) - 1

    if step >= 0:

        await state.update_data(step=step)
        current_question = questions[step]


        response = (
            f"–ó–∞–ø–∏—Ç–∞–Ω–Ω—è:\n<pre><code>{current_question[1]}:\n{current_question[2]}</code></pre>\n"
            f"–í—ñ–¥–ø–æ–≤—ñ–¥—å:\n<pre><code>{current_question[3]}</code></pre>"
        )
        await callback_query.message.edit_text(response, parse_mode="html", reply_markup=kb.answer_nav)
    else:
        await callback_query.answer("–¶–µ –±—É–≤ –ø–µ—Ä—à–∏–π –∑–∞–ø–∏—Å.")




@router.message(F.text == '–†–æ–∑–∫–ª–∞–¥ üìã')
async def lesson_plan(message: Message):
    await message.answer("–í–∏ –º–æ–∂–µ—Ç–µ <b>–ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤,</b> –∞–±–æ <b>–†–æ–∑–∫–ª–∞–¥ —É—Ä–æ–∫—ñ–≤ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º.</b>", parse_mode="html",reply_markup=kb.rozklad)

@router.callback_query(F.data == 'alert_plan')
async def alert_plan(callback_query: CallbackQuery):

    data = await db.execute_query("SELECT photo_id FROM call_schedule ORDER BY id DESC LIMIT 1",fetch="fetchone")
    if data:
        photo_id = data[0]
        photo_url = f"https://raw.githubusercontent.com/skachpro/photos_lyceum_bot/refs/heads/main/photos/AgACAgIAAxkBAAIFjmdJ_SENu66ydLFppi5xgpJVTZpxAAIS4jEb1npRSizdC1npjreEAQADAgADeQADNgQ.jpg"
        await callback_query.message.delete()
        await callback_query.message.answer_photo(photo=photo_url, caption="–†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤")
    else:
        await callback_query.message.answer("–§–æ—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ")
#–ù–µ –¥–ª—è –£—á–Ω—ñ–≤
@router.message(F.text == '–Ø –Ω–µ –Ω–∞–≤—á–∞—é—Å—å –≤ –ª—ñ—Ü–µ—ó ‚ùåüë®‚Äçüéì')
async def not_for_students(message: Message):
    await message.answer(f'–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é!', reply_markup=kb.not_for_students)


@router.message(F.text == '–ö–æ–Ω—Ç–∞–∫—Ç–∏ ‚òéÔ∏è')
async def contacts(message: Message):
    await message.answer(
        (
            "<b>–ó –Ω–∞–º–∏ –º–æ–∂–Ω–∞ –∑–≤'—è–∑–∞—Ç–∏—Å—å:</b>\n\n"
            "<b>Email:</b> <a href='mailto:tbl@ua.fm'>tbl@ua.fm</a>\n"
            "<b>–ù–æ–º–µ—Ä–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b>\n"
            "  ‚Ä¢ <a href='tel:+0382674323'>+0382674323</a>\n"
            "  ‚Ä¢ <a href='tel:+38067600920'>+38067600920</a>\n"
            "  ‚Ä¢ <a href='tel:+380975581966'>+380975581966</a>\n"
            "  ‚Ä¢ <a href='tel:+0967235770'>+0967235770</a>\n"
            "<b>–ê–¥—Ä–µ—Å–∞:</b> <i>–≤—É–ª. –¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞ 14/1</i>"
        ),
        parse_mode="html"
    )

#–î–ª—è –£—á–Ω—ñ–≤
@router.message(F.text == '–Ø –Ω–∞–≤—á–∞—é—Å—å –≤ –ª—ñ—Ü–µ—ó üë®‚Äçüéì')
async def for_students(message: Message, state: FSMContext):
    await message.answer(f'–û–±–µ—Ä—ñ—Ç—å –≤ —è–∫–æ–º—É –≤–∏ –∫–ª–∞—Å—ñ ‚¨áÔ∏è', reply_markup=kb.select_num_of_class)
    await state.set_state(RememberMe.user_id)
    await state.update_data(user_id=message.from_user.id)
    await state.set_state(RememberMe.user_class)

@router.message(RememberMe.user_class)
async def class_choosed(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(user_class=message.text)
    data = await state.get_data()
    user_id = data["user_id"]
    user_class = data["user_class"]

    answer = f"–ì–æ—Ç–æ–≤–æ\n–í–∞—à Id: {user_id}\n–í–∞—à –∫–ª–∞—Å: {user_class}"

    await db.remember_me(user_id, user_class)
    try:
        if user_class == "7-9 –∫–ª–∞—Å":
            await message.answer(answer, parse_mode='HTML', reply_markup=kb.kbd_for_young_stud)
        elif user_class == '10-11 –∫–ª–∞—Å':
            await message.answer(answer, parse_mode='HTML', reply_markup=kb.for_students)
    except:
        await message.answer(answer, parse_mode='HTML', reply_markup=kb.start)
    await state.clear()

@router.message(F.text == '–û–±—Ä–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å —É 10 –∫–ª–∞—Å—ñ üîç')
async def select_profile(message: Message):
    await message.answer(f"–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é...",reply_markup=kb.profile_menu)

@router.callback_query(F.data == "check_my_profile")
async def check_my_profile(callback_query: CallbackQuery):
    await callback_query.message.edit_text(
        f'–í–∞–º –±—É–¥–µ –Ω–∞–¥–∞–Ω–æ –∞–Ω–∫–µ—Ç—É —è–∫–∞ –¥–æ–ø–æ–º–æ–∂–µ –æ–±—Ä–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å, –ø–æ–∫–∞–∂–µ –¥–æ —è–∫–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é –≤–∏ –±—ñ–ª—å—à —Å—Ö–∏–ª—å–Ω—ñ —É –≤—ñ–¥—Å–æ—Ç–∫–æ–≤–æ–º—É —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—ñ.',
        reply_markup=kb.start_chooing_profiles)

class ProfileStates(StatesGroup):
    step = State()

@router.callback_query(F.data == "profile_catalog")
async def profiles(callback_query: CallbackQuery, state: FSMContext):
    profiles_list = await db.get_profiles()
    if not profiles_list:
        await callback_query.message.answer("–ü—Ä–æ—Ñ—ñ–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.")
        return

    await state.set_state(ProfileStates.step)
    await state.update_data(step=0)


    response = (
        f"<b>–ù–∞–∑–≤–∞ –ø—Ä–æ—Ñ—ñ–ª—é:</b> {profiles_list[0]['profile_name']}\n"
        f"<b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b> {profiles_list[0]['profile_info']}"
    )
    profile_name = profiles_list[0]['profile_name']
    keyboard_profiles = InlineKeyboardBuilder()
    keyboard_profiles.add(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data="back_profile"),
                          InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data="next_profile"),)
    keyboard_profiles.add(InlineKeyboardButton(text="–î—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ", url=f"http://tbl.km.ua/{profile_name}"))
    await callback_query.message.edit_text(response, parse_mode='HTML', reply_markup=keyboard_profiles.as_markup())


@router.callback_query(F.data == "next_profile")
async def about_next(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    step = data.get("step", 0) + 1
    print(step)

    profiles_list = await db.get_profiles()
    if step < len(profiles_list):
        response = (
            f"<b>–ù–∞–∑–≤–∞ –ø—Ä–æ—Ñ—ñ–ª—é:</b> {profiles_list[step]['profile_name']}\n"
            f"<b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b> {profiles_list[step]['profile_info']}"
        )
        profile_name = profiles_list[step]['profile_name']
        keyboard_profiles = InlineKeyboardBuilder()
        keyboard_profiles.add(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data="back_profile"), InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data="next_profile"),)
        keyboard_profiles.add(InlineKeyboardButton(text="–î—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ", url=f"http://tbl.km.ua/{profile_name}"))
        await callback_query.message.edit_text(response, parse_mode='HTML', reply_markup=keyboard_profiles.as_markup())
        
        await state.update_data(step=step)
    else:
        await callback_query.answer("–ë—ñ–ª—å—à–µ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ –Ω–µ–º–∞—î.")

@router.callback_query(F.data == "back_profile")
async def about_next(callback_query: CallbackQuery, state: FSMContext):

    profiles_list = await db.get_profiles()
    data = await state.get_data()
    step = data.get("step", len(profiles_list)) - 1
    print(step)

    if step >= 0:
        response = (
            f"<b>–ù–∞–∑–≤–∞ –ø—Ä–æ—Ñ—ñ–ª—é:</b> {profiles_list[step]['profile_name']}\n"
            f"<b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b> {profiles_list[step]['profile_info']}"
        )
        profile_name = profiles_list[step]['profile_name']
        keyboard_profiles = InlineKeyboardBuilder()
        keyboard_profiles.add(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data="back_profile"), InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data="next_profile"),)
        keyboard_profiles.add(InlineKeyboardButton(text="–î—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ", url=f"http://tbl.km.ua/{profile_name}"))
        await callback_query.message.edit_text(response, parse_mode='HTML', reply_markup=keyboard_profiles.as_markup())
        
        await state.update_data(step=step)
    else:
        await callback_query.answer("–ë—ñ–ª—å—à–µ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ –Ω–µ–º–∞—î.")

class Test(StatesGroup):
    fav_subj = State()
    skills = State()
    develop_skills = State()
    favorite_tasks = State()
    free_time = State()
    future_profession = State()

# –ü–æ—á–∞—Ç–∏ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è
@router.callback_query(F.data == 'start_testing_profiles')
async def start_test(callback_query: CallbackQuery, state:FSMContext):
    await callback_query.message.delete()
    await callback_query.message.answer("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ—á–∞—Ç–æ.")
    await state.set_state(Test.fav_subj)
    await callback_query.message.answer("1. –û–±–µ—Ä—ñ—Ç—å —É–ª—é–±–ª–µ–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç.", reply_markup=kb.test_subj)


#–ü–æ—á–∞—Ç–æ–∫ –í—ñ–¥–ª–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
@router.callback_query(Test.fav_subj)
async def que1(callback_query: CallbackQuery, state: FSMContext):
    # user_id = callback_query.from_user.id
    answer = callback_query.data
    # await db.add_subj(answer, user_id)
    await state.update_data(fav_subj=answer)
    await callback_query.answer(f'–í—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ')
    await state.set_state(Test.skills)
    await callback_query.message.edit_text(f"2. –©–æ –≤–∞–º –≤–¥–∞—î—Ç—å—Å—è –Ω–∞–π–∫—Ä–∞—â–µ?", reply_markup=kb.skills)

@router.callback_query(Test.skills)
async def que2(callback_query: CallbackQuery, state: FSMContext):
    answer = callback_query.data
    await state.update_data(skills=answer)
    await callback_query.answer(f'–í—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ')
    await state.set_state(Test.develop_skills)
    await callback_query.message.edit_text(f"3. –Ø–∫—ñ –Ω–∞–≤–∏—á–∫–∏ —Ö–æ—á–µ—Ç–µ —Ä–æ–∑–≤–∏–≤–∞—Ç–∏?", reply_markup=kb.develop_skills)

@router.callback_query(Test.develop_skills)
async def que3(callback_query: CallbackQuery, state: FSMContext):
    answer = callback_query.data
    await state.update_data(develop_skills=answer)
    await callback_query.answer(f'–í—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ')
    await state.set_state(Test.favorite_tasks)
    await callback_query.message.edit_text(f"4. –Ø–∫—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∞–º –Ω–∞–π–±—ñ–ª—å—à–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏?", reply_markup=kb.favorite_tasks)

@router.callback_query(Test.favorite_tasks)
async def que3(callback_query: CallbackQuery, state: FSMContext):
    answer = callback_query.data
    await state.update_data(favorite_tasks=answer)
    await callback_query.answer(f'–í—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ')
    await state.set_state(Test.free_time)
    await callback_query.message.edit_text(f"5. –Ø–∫ –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –≤—ñ–ª—å–Ω–∏–π —á–∞—Å?", reply_markup=kb.free_time)

@router.callback_query(Test.free_time)
async def que4(callback_query: CallbackQuery, state: FSMContext):
    answer = callback_query.data
    await state.update_data(free_time=answer)
    await callback_query.answer(f'–í—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ')
    await state.set_state(Test.future_profession)
    await callback_query.message.edit_text(f"6. –ö–∏–º —Ö–æ—á–µ—Ç–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏?", reply_markup=kb.future_profession)

@router.callback_query(Test.future_profession)
async def test_end(callback_query: CallbackQuery, state: FSMContext):
    answer = callback_query.data
    await state.update_data(future_profesion=answer)
    await callback_query.answer(f'–í—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ')
    await callback_query.message.edit_text(f"–¢–µ—Å—Ç –ó–∞–≤–µ—Ä—à–µ–Ω–æ!")
    data = await state.get_data()
    await state.clear()
    math = 0
    it = 0
    history = 0
    law = 0
    geography = 0
    chem_bio = 0
    ukr_philo = 0
    foreign_philo = 0
    sports_military = 0
    art = 0
    #await callback_query.message.answer(", ".join(map(str, data.values())))
    for value in data.values():
        if value == 'math':
            math += 1
        elif value == 'it':
            it += 1
        elif value == 'history':
            history += 1
        elif value == 'geography':
            geography += 1
        elif value == 'chem_bio':
            chem_bio += 1
        elif value == 'ukr_philo':
            ukr_philo += 1
        elif value == 'law':
            law += 1
        elif value == 'foreign_philo':
            foreign_philo += 1
        elif value == 'sports_military':
            sports_military += 1
        elif value == 'art':
            art += 1
    data = {
        "–º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π": math * 16,
        "—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π": it * 16,
        "—ñ—Å—Ç–æ—Ä–∏—á–Ω–∏–π": history * 16,
        "–≥–µ–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏–π": geography * 16,
        "—Ö—ñ–º—ñ–∫–æ-–±—ñ–æ–ª–æ–≥—ñ—á–Ω–∏–π": chem_bio * 16,
        "—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó-—Ñ—ñ–ª–æ–ª–æ–≥—ñ—ó": ukr_philo * 16,
        "–ø—Ä–∞–≤–æ–≤–∏–π": law * 16,
        "—ñ–Ω–æ–∑–µ–º–Ω–æ—ó-—Ñ—ñ–ª–æ–ª–æ–≥—ñ—ó": foreign_philo * 16,
        "–≤—ñ–π—Å—å–∫–æ–≤–æ-—Å–ø–æ—Ä—Ç–∏–≤–Ω–∏–π": sports_military * 16,
        "—Ö—É–¥–æ–∂–Ω—å–æ-–µ—Å—Ç–µ—Ç–∏—á–Ω–∏–π": art * 16
    }
    max_key = max(data, key=data.get)
    button = InlineKeyboardBuilder()
    button.add(InlineKeyboardButton(text="–î—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ", url=f"http://tbl.km.ua/{max_key}"))
    await callback_query.message.edit_text(
        f"<b>–°—Ö–∏–ª—å–Ω—ñ—Å—Ç—å –¥–æ:</b>\n"
        f"<code>–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∏: {math * 16}%\n"
        f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏: {it * 16}%\n"
        f"–Ü—Å—Ç–æ—Ä—ñ—ó: {history * 16}%\n"
        f"–ì–µ–æ–≥—Ä–∞—Ñ—ñ—ó: {geography * 16}%\n"
        f"–•—ñ–º—ñ—ó/–ë—ñ–æ–ª–æ–≥—ñ—ó: {chem_bio * 16}%\n"
        f"–£–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó —Ñ—ñ–ª–æ–ª–æ–≥—ñ—ó: {ukr_philo * 16}%\n"
        f"–ü—Ä–∞–≤–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é: {law * 16}%\n"
        f"–Ü–Ω–æ–∑–µ–º–Ω–æ—ó —Ñ—ñ–ª–æ–ª–æ–≥—ñ—ó: {foreign_philo * 16}%\n"
        f"–í—ñ–π—Å—å–∫–æ–≤–æ/–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é: {sports_military * 16}%\n"
        f"–•—É–¥–æ–∂–Ω—å–æ-–ï—Å—Ç–µ—Ç–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é: {art * 16}%</code>\n"
        f'–ó–≥—ñ–¥–Ω–æ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∫–µ—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–π–±—ñ–ª—å—à–µ –≤–∞–º –ø—ñ–¥—Ö–æ–¥–∏—Ç—å: <b>{max_key}</b> –ø—Ä–æ—Ñ—ñ–ª—å',
        parse_mode="html", reply_markup=button.as_markup()
    )




@router.message(F.text == '–ó–∞–ø–∏—Ç–∞–Ω–Ω—è/–í—ñ–¥–ø–æ–≤—ñ–¥—å üí¨')
async def qa(message:Message):
    await message.answer(f"<b>–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è/–ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é.</b>\n–ê–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –Ω–∞ —è–∫—ñ –≤–∂–µ –Ω–∞–¥–∞–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.",parse_mode="html",reply_markup=kb.qa)


@router.message(F.text == '–ü—Ä–æ –õ—ñ—Ü–µ–π üè´')
async def about_lyceum(message: Message):
    await message.answer_photo(photo="https://lh3.googleusercontent.com/p/AF1QipNxPlNdabKtiwUqr-0qGomj8XwD2bn0FURD-7Z7=s680-w680-h510",caption=f"""<b>–ö–æ–º—É–Ω–∞–ª—å–Ω–∏–π –∑–∞–∫–ª–∞–¥ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å–µ—Ä–µ–¥–Ω—å–æ—ó –æ—Å–≤—ñ—Ç–∏ \n‚Äú–õ—ñ—Ü–µ–π ‚Ññ3 —ñ–º–µ–Ω—ñ –ê—Ä—Ç–µ–º–∞ –ú–∞–∑—É—Ä–∞–•–º–µ–ª—å–Ω–∏—Ü—å–∫–æ—ó –º—ñ—Å—å–∫–æ—ó —Ä–∞–¥–∏‚Äù</b>\n\n–í –õ—ñ—Ü–µ—ó ‚Ññ3 —ñ–º–µ–Ω—ñ –ê—Ä—Ç–µ–º–∞ –ú–∞–∑—É—Ä–∞ –ø—Ä–∞—Ü—é—é—Ç—å –≤—ñ–¥–æ–º—ñ –≤—á–∏—Ç–µ–ª—ñ, –∞–≤—Ç–æ—Ä–∏ –ø—ñ–¥—Ä—É—á–Ω–∏–∫—ñ–≤ —Ç–∞ –ø–æ—Å—ñ–±–Ω–∏–∫—ñ–≤,\n–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ –æ–ª—ñ–º–ø—ñ–∞–¥,\n–∫–æ–Ω–∫—É—Ä—Å—É-–∑–∞—Ö–∏—Å—Ç—É –ú–ê–ù —ñ —Å–ø–æ—Ä—Ç–∏–≤–Ω–∏—Ö –∑–º–∞–≥–∞–Ω—å...<a href='http://tbl.km.ua/'>–¥–∞–ª—ñ</a>\n\n""", parse_mode="html")

class QA(StatesGroup):
    name = State()
    que = State()

@router.callback_query(F.data == 'ask')
async def qa_run(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(QA.name)
    await callback_query.message.edit_text(
        "–í–∏ –∑–º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –ø—ñ—Å–ª—è —Ç–æ–≥–æ —è–∫ –≤–≤–µ–¥–µ—Ç–µ —Å–≤–æ—î —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ:"
    )

@router.message(QA.name)
async def qa_que(message: Message, state: FSMContext):

    await state.update_data(name=message.text)
    await state.set_state(QA.que)
    await message.answer(
        "–î—è–∫—É—î–º–æ! –¢–µ–ø–µ—Ä –Ω–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —ñ –º–∏ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –ø–µ—Ä–µ–¥–∞–º–æ –π–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó —à–∫–æ–ª–∏:"
    )

@router.message(QA.que)
async def qa_res(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    name = data.get("name")
    question = message.text

    await db.que_user(user_id,name,question)

    await message.answer(
        f"–î—è–∫—É—î–º–æ, <b>{name}</b>! –í–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ:\n\n{question}"
    ,parse_mode="HTML")
    await state.clear()

@router.message(or_f(Command("admin"),(F.text == "–Ø –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó –ª—ñ—Ü–µ—é üè´üßë‚Äçüíº")))
async def admin(message: Message):
    if message.from_user.id != 6156445988 and message.from_user.id != 1397873368 and message.from_user.id != 5832908779:
        return
    else:
        await message.answer(f"–ê–¥–º—ñ–Ω–ø–∞–Ω–µ–ª—å –¥–æ –≤–∞—à–∏—Ö –ø–æ—Å–ª—É–≥",reply_markup=kb.admin)


class Alert(StatesGroup):
    photo_id = State()
    text = State()

@router.message(F.text == '–î–æ—à–∫–∞ –æ–≥–æ–ª–æ—à–µ–Ω—å')
async def al_desk_admin(message: Message,state:FSMContext):
    await state.set_state(Alert.photo_id)
    await message.answer(f'–ü—Ä–∏—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é.', reply_markup=kb.skip_photo)

@router.callback_query(F.data == 'skip_photo')
async def skip_photo(callback_query: CallbackQuery, state: FSMContext):

    await db.execute_query("""
        INSERT INTO alert_desk (photo_id) VALUES (%s)
    """, ("None",))
    await callback_query.message.edit_text("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ—à–∫–∏ –æ–≥–æ–ª–æ—à–µ–Ω—å.")
    await state.set_state(Alert.text)


@router.message(Alert.photo_id, F.photo)
async def get_photo(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo_id=photo_id)
    await db.execute_query("""
        INSERT INTO alert_desk (photo_id) VALUES (%s)
    """,(photo_id,))
    await message.answer("–§–æ—Ç–æ –æ—Ç—Ä–∏–º–∞–Ω–æ!\n–ù–∞–ø–∏—à—ñ—Ç—å —Ç–µ–∫—Å—Ç –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è")
    await state.set_state(Alert.text)

@router.message(Alert.text)
async def get_text_for_alert_desk(message: Message, state: FSMContext):
    text = message.text
    await state.update_data(text=text)
    data = await state.get_data()
    photo_id = data.get("photo_id", "null")
    print("–§–æ—Ç–∫–∞:",photo_id)

    await db.execute_query("""
        INSERT INTO alert_desk (photo_id, text) VALUES (%s,%s)
    """, (photo_id,text))

    file_info = await bot.get_file(photo_id)
    file_path = file_info.file_path

    async with aiohttp.ClientSession() as session:
        async with session.get(f"https://api.telegram.org/file/bot{os.getenv('BOT_API')}/{file_path}") as resp:
            if resp.status == 200:
                file_content = await resp.read()
                file_name = f"{photo_id}.jpg"

                result = upload_to_github(file_name, file_content)
                await message.answer(result)
                photo_url = f"https://raw.githubusercontent.com/skachpro/photos_lyceum_bot/refs/heads/main/photos/{photo_id}.jpg"
            else:
                await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ç–æ.")

    await message.answer_photo(photo=photo_url, caption=text)

class Call_Schedule(StatesGroup):
    photo = State()
@router.message(F.text == '–†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤')
async def call_schedule_admin(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –†–æ–∑–∫–ª–∞–¥—É –¥–∑–≤—ñ–Ω–∫—ñ–≤")
    await state.set_state(Call_Schedule.photo)

@router.message(Call_Schedule.photo)
async def call_schedule_set_photo(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo=photo_id)
    await db.execute_query("""INSERT INTO call_schedule(photo_id) VALUES (%s)""", (photo_id,))
    await state.clear()

    file_info = await bot.get_file(photo_id)
    file_path = file_info.file_path

    async with aiohttp.ClientSession() as session:
        async with session.get(f"https://api.telegram.org/file/bot{os.getenv('BOT_API')}/{file_path}") as resp:
            if resp.status == 200:
                file_content = await resp.read()
                file_name = f"{photo_id}.jpg"
                photo_url = f"https://raw.githubusercontent.com/skachpro/photos_lyceum_bot/refs/heads/main/photos/{photo_id}.jpg"
                result = upload_to_github(file_name, file_content)
                await message.answer_photo(photo=photo_url)
            else:
                await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç–∏ —Ñ–æ—Ç–æ.")
    await message.answer("–§–æ—Ç–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –±–∞–∑—ñ")

@router.message(F.text == "–ú–µ–Ω—é —ó–¥–∞–ª—å–Ω—ñ üçΩÔ∏è")
async def stolovka(message: Message):
    photo_id = await db.execute_query("""SELECT photo_id FROM eat ORDER BY id DESC LIMIT 1""")


    print(photo_id)
    if photo_id:
        photo_url = f"https://raw.githubusercontent.com/skachpro/photos_lyceum_bot/refs/heads/main/photos/{photo_id[0][0]}.jpg"
        await message.answer_photo(photo=photo_url, caption='–ú–µ–Ω—é —ñ–¥–∞–ª—å–Ω—ñ')
    else:
        await message.answer("–ú–µ–Ω—é –Ω–µ –¥–æ–¥–∞–Ω–æ")

class Stolova(StatesGroup):
    photo = State()

@router.message(F.text == '–ú–µ–Ω—é —ó–¥–∞–ª—å–Ω—ñ')
async def stolovka_admin(message: Message, state: FSMContext):
    await state.set_state(Stolova.photo)
    await message.answer("–î–æ–¥–∞–π—Ç–µ —Ñ–æ—Ç–æ –ú–µ–Ω—é")

@router.message(Stolova.photo)
async def stolova_photo(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo=photo_id)

    await db.execute_query("""
        INSERT INTO eat(photo_id) VALUES(%s)
    """, (photo_id,))
    await state.clear()
    file_info = await bot.get_file(photo_id)
    file_path = file_info.file_path

    async with aiohttp.ClientSession() as session:
        async with session.get(f"https://api.telegram.org/file/bot{os.getenv('BOT_API')}/{file_path}") as resp:
            if resp.status == 200:
                file_content = await resp.read()
                file_name = f"{photo_id}.jpg"
                photo_url = f"https://raw.githubusercontent.com/skachpro/photos_lyceum_bot/refs/heads/main/photos/{photo_id}.jpg"
                result = upload_to_github(file_name, file_content)
                if result:
                    await message.answer_photo(photo=photo_url)
            else:
                await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–∞—á–∞—Ç–∏ —Ñ–æ—Ç–æ.")
    await message.answer("–§–æ—Ç–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –±–∞–∑—ñ")
    await message.answer_photo(photo=photo_url)


@router.message(F.text=='–î–æ—à–∫–∞ –æ–≥–æ–ª–æ—à–µ–Ω—å üìå')
async def alert_desk(message: Message):
    al_desk = await db.execute_query("SELECT photo_id,text FROM alert_desk ORDER BY id DESC LIMIT 1")
    #print(al_desk)
    if al_desk:
        photo_id = al_desk[0][0]
        text = al_desk[0][1]
        photo_url = f"https://raw.githubusercontent.com/skachpro/photos_lyceum_bot/refs/heads/main/photos/{photo_id}.jpg"
        await message.answer_photo(photo=photo_url, caption=text)
    else:
        await message.answer("–ù–∞—Ä–∞–∑—ñ –æ–≥–æ–ª–æ—à–µ–Ω—å –Ω–µ–º–∞—î")


class QAstep(StatesGroup):
    step = State()
    questions = State()

@router.message(F.text == "–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è")
async def qa_answ(message: Message, state: FSMContext):

    questions = await db.execute_query("SELECT id, name, question FROM question_answer WHERE answer = 'None'")
    await state.update_data(step=0)
    if questions:
        question = questions[0]
        await message.answer(
            f'–ó–≤–µ—Ä–Ω—É–≤—Å—è:\n<b>{question[1]}</b>\n\n–¢–µ–∫—Å—Ç:\n{question[2]}',
            parse_mode="html",
            reply_markup=kb.qa_navigation
        )
        await state.update_data(questions=questions)
    else:
        await message.answer("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å.")

@router.message(F.text == '–î–∞–ª—ñ ‚û°Ô∏è')
async def next_que(message: Message, state: FSMContext):
    data = await state.get_data()
    step = data.get("step", 0) + 1
    questions = data.get("questions", [])
    if not questions:
        await message.answer("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å.")
        return
    if step < 0 or step >= len(questions):
        await message.answer("–ù–µ–º–∞—î –±—ñ–ª—å—à–µ –ø–∏—Ç–∞–Ω—å.")
        return
    await state.update_data(step=step)
    question = questions[step]
    await message.answer(
        f'–ó–≤–µ—Ä–Ω—É–≤—Å—è:\n<b>{question[1]}</b>\n\n–¢–µ–∫—Å—Ç:\n{question[2]}',
        parse_mode="html",
        reply_markup=kb.qa_navigation
    )

@router.message(F.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
async def prev_que(message: Message, state: FSMContext):
    data = await state.get_data()
    step = data.get("step", 0)
    questions = data.get("questions", [])
    step = max(step - 1, 0)
    await state.update_data(step=step)
    if step < len(questions):
        question = questions[step]
        await message.answer(
            f'–ó–≤–µ—Ä–Ω—É–≤—Å—è:\n<b>{question[1]}</b>\n\n–¢–µ–∫—Å—Ç:\n{question[2]}',
            parse_mode="html",
            reply_markup=kb.qa_navigation
        )

class Answer(StatesGroup):
    answer = State()

@router.message(F.text == '‚úèÔ∏è –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏')
async def que_answer(message: Message, state: FSMContext):
    data = await state.get_data()
    step = data.get("step", 0)
    questions = data.get("questions", [])
    if step < len(questions):
        question = questions[step]
        await message.answer(
            f'–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n<pre>–í—ñ–¥: {question[1]}\n–¢–µ–∫—Å—Ç: {question[2]}</pre>\n–ü–∏—à—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å:',

            parse_mode="html"
        )
        await state.update_data(current_question_id=question[0])
    await state.set_state(Answer.answer)

@router.message(Answer.answer)
async def answer(message: Message, state: FSMContext):
    await state.update_data(answer=message.text)
    data = await state.get_data()
    answer = data['answer']
    question_id = data.get("current_question_id")
    await db.execute_query("UPDATE question_answer SET answer = %s WHERE id = %s", (answer, question_id))
    await message.answer("–í—ñ–¥–ø–æ–≤—ñ–¥—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ.",reply_markup=kb.admin)
    await state.clear()

